@using apcrshr_site.Helper
@model IList<Site.Core.DataModel.Model.MenuModel>
@{
    ViewBag.Title = "Quản Trị Viên";
    Layout = "~/Areas/Administrator/Views/Shared/_Layout.cshtml";
}

<!--Menu-->
<div class="row">
    <div class="col-sm-6">
        <div class="box box-color box-bordered">
            <div class="box-title">
                <h3>
                    <i class="fa fa-bar-chart-o"></i>
                    Danh Mục
                </h3>
                <div class="actions">
                    <a href="#" class="btn btn-mini content-refresh">
                        <i class="fa fa-refresh"></i>
                    </a>
                    <a href="#" class="btn btn-mini content-remove">
                        <i class="fa fa-times"></i>
                    </a>
                    <a href="#" class="btn btn-mini content-slideUp">
                        <i class="fa fa-angle-down"></i>
                    </a>
                </div>
            </div>
            <div class="box-content">
                <div class="statistic-big">
                    <div class="top">
                        <div class="left">
                            <span class="title">Thư mục</span>
                        </div>
                        <div class="right">
                            <span>Thêm bài viết</span>
                            <a href='@Url.Action("CreateArticle", "Article")' id="lnkCreateArticle" class="btn" rel="tooltip" title="" data-original-title="Thêm bài viết">
                                <i class="fa fa-plus-circle"></i>
                            </a>
                        </div>
                    </div>
                    <div class="bottom">

                        <!--Begin menu-->
                        @if (Model != null)
                        {
                            @Html.TreeMenu(Model);
                        }

                        <!--End menu-->

                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="col-sm-6">
        <div class="box box-color lightred box-bordered">
            <div class="box-title">
                <h3>
                    <i class="fa fa-bar-chart-o"></i>
                    Thêm Mới Danh Mục
                </h3>
                <div class="actions">
                    <a href="#" class="btn btn-mini content-remove">
                        <i class="fa fa-times"></i>
                    </a>
                    <a href="#" class="btn btn-mini content-slideUp">
                        <i class="fa fa-angle-down"></i>
                    </a>
                </div>
            </div>
            <div class="box-content">
                <div class="statistic-big">
                    <div class="bottom">
                        @using (Html.BeginForm("CreateCategoryMenu", "Admin", FormMethod.Post, new { @class = "form-horizontal" }))
                        {
                            @Html.AntiForgeryToken()
                            <div class="form-group">
                                <label for="txtMenuParent" class="control-label col-sm-2">Menu</label>
                                <div class="col-sm-10">
                                    <input type="text" name="parentTitle" id="txtMenuParent" placeholder="/" readonly class="form-control">
                                </div>
                            </div>
                            <div class="form-group">
                                <label for="txtMenuLevel" class="control-label col-sm-2"></label>
                                <div class="col-sm-10">
                                    <input type="checkbox" name="txtMenuLevel" id="txtMenuLevel" value="Thư mục gốc">
                                    <label class='inline' for="txtMenuLevel">Thư mục gốc</label>
                                </div>
                            </div>
                            <div class="form-group">
                                <label for="txtMenuCategoryTitle" class="control-label col-sm-2">Tiêu Đề <span class="validation-span-required">(*)</span></label>
                                <div class="col-sm-10">
                                    <input type="text" name="Title" id="txtMenuCategoryTitle" placeholder="Tên danh mục (Menu)" class="form-control">
                                    @Html.ValidationMessage("Title")
                                </div>
                            </div>
                            <div class="form-group">
                                <label for="textfield" class="control-label col-sm-2">Thứ tự</label>
                                <div class="col-sm-10">
                                    <input type="text" name="DisplayOrder" id="txtDisplayOrder" value="@(Model != null && Model.Count > 0 ? Model.Max(m => m.DisplayOrder) + 1 : 0)" placeholder="Thứ tự" class="form-control" readonly>
                                </div>
                            </div>
                            <div class="form-group">
                                <label for="textfield" class="control-label col-sm-2">Loại</label>
                                <div class="col-sm-10">
                                    <div class="check-line">
                                        <input type="checkbox" name="Type" id="txtType" value="true">
                                        <label class='inline' for="txtType">Liên kết ngoài</label>
                                    </div>
                                </div>
                            </div>
                            <div class="form-group">
                                <label for="textfield" class="control-label col-sm-2">URL</label>
                                <div class="col-sm-10">
                                    <input type="text" name="URL" list="productName" class="form-control" />
                                    <datalist id="productName">
                                        @{
                                            IDictionary<string, string> links = DataHelper.GetInstance().InternalLinks();
                                            var keys = links.Keys;
                                            foreach (var key in keys)
                                            {
                                                <option value="@links[key]">@key</option>
                                            }
                                        }
                                    </datalist>
                                </div>
                            </div>
                            <div class="form-group">
                                <label for="textfield" class="control-label col-sm-2">Ngôn Ngữ</label>
                                <div class="col-sm-10">
                                    <div class="check-demo-col">
                                        <div class="check-line">
                                            <input type="radio" name="Language" id="Language-VN" class='icheck-me' data-skin="square" data-color="blue" value="VN" checked>
                                            <label class='inline' for="Language">Tiếng Việt</label>
                                        </div>
                                        <div class="check-line">
                                            <input type="radio" name="Language" id="Language-EN" class='icheck-me' data-skin="square" data-color="blue" value="EN">
                                            <label class='inline' for="Language">English</label>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="form-actions">
                                <button type="submit" class="btn btn-primary">Lưu Thông Tin</button>
                                <button type="button" onclick="resertForm()" class="btn">Khởi tạo lại</button>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script type="text/javascript">

    //Disabled article
    $("#lnkCreateArticle").attr("disabled", "disabled");

    $("#txtMenuLevel").change(function () {
        if (this.checked) {
            $("#txtMenuParent").val("/");
        } else {
            var file = $('#browser span.file.selected').html();
            var folder = $('#browser span.folder.selected').html();
            if (file != null && file != "") {
                $("#txtMenuParent").val(file);
            }
            if (folder != null && folder != "") {
                $("#txtMenuParent").val(folder);
            }
        }
    });

    function validateForm() {
        if ($("#txtMenuCategoryTitle").val() == null || $("#txtMenuCategoryTitle").val() == "") {
            $("#txtMenuCategoryTitle").focus();
            return false;
        }
        return true;
    }

    function resertForm() {
        $("#txtMenuCategoryTitle").val("");
    }

    function deleteMenu(id) {
        bootbox.confirm("Bạn có chắc chắn muốn xóa bản ghi này?", function (result) {
            if (result) {
                $.ajax({
                    type: 'GET',
                    contentType: 'application/json',
                    url: '@Url.Action("DeleteMenu", "Admin")',
                    data: { menuID: id },
                    success: function (data) {
                        if (data.errorCode == 0) {
                            $('#' + id + '').parent().remove();
                            bootbox.hideAll();
                        } else {
                            bootbox.alert(data.message, function () {
                                bootbox.hideAll();
                            });
                        }
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        bootbox.hideAll();
                    }
                });
                return true;
            } else {
                bootbox.hideAll();
                return false;
            }
        });
    }

</script>

<script type="text/javascript">
    $(function () {
        $("#browser").treeview();

        $('#browser span.file').bind('click', function () {
            //clear all clicked items if any
            $('.selected').removeClass('selected');
            //set this clicked
            $(this).addClass('selected');
            //$("#txtMenuParent").val($(this).html());

            //Select parent menu
            selectParent($(this).html(), $(this).attr("id"));

            //Enable article
            $("#lnkCreateArticle").removeAttr("disabled");
            $("#lnkCreateArticle").attr("href", "/Administrator/Article/CreateArticle?menuTitle=" + $(this).html());
        });
        $('#browser span.folder').bind('click', function () {
            //clear all clicked items if any
            $('.selected').removeClass('selected');
            //set this clicked
            $(this).addClass('selected');
            //$("#txtMenuParent").val($(this).html());

            //Select parent menu
            selectParent($(this).html(), $(this).attr("id"));

            //Disabled article
            $("#lnkCreateArticle").attr("disabled", "disabled");
        });
        $("#browser").bind("contextmenu", function (event) {
            if ($(event.target).is("li") || $(event.target).parents("li").length) {
                $("#browser").treeview({
                    remove: $(event.target).parents("li").filter(":first")
                });
                return false;
            }
        });


    })

    function selectParent(title, id) {
        $.blockUI({ message: $('#spinner') });
        $.ajax({
            type: 'GET',
            contentType: 'application/json',
            url: '@Url.Action("GetMenuCreation", "Admin")',
            data: { title: title, id: id },
            success: function (data) {
                $.unblockUI();
                $("#txtMenuParent").val(data.title);
                $("#txtDisplayOrder").val(data.displayOrder);
            },
            error: function (jqXHR, textStatus, errorThrown) {
                $.unblockUI();
            }
        });
    }

</script>